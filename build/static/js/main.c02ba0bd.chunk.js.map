{"version":3,"sources":["store/modalStore.js","store/taskListStore.js","component/modalNewTask.js","component/modalChange.js","component/header.js","component/tableRow.js","component/table.js","component/content.js","App.js","serviceWorker.js","index.js"],"names":["ModalStore","this","newTaskModal","changeTaskModal","changeID","id","decorate","observable","getChangeID","computed","isNewTaskModal","isChangeTaskModal","openNewTaskModal","action","closeNewTaskModal","openChangeTaskModal","closeChangeTaskModal","modalStore","localStorageName","TaskListStore","taskList","JSON","parse","localStorage","getItem","task","filter","ts","name","description","setItem","stringify","push","saveTaskList","map","v","i","Object","assign","length","getTaskList","getTaskCount","getTaskNameByID","getTaskDescriptionByID","addNewTask","removeTaskByID","observer","useState","showSave","setSave","setName","setDescription","closeForm","Modal","show","onHide","animation","Header","closeButton","Title","Form","className","Body","Group","type","onChange","event","target","value","rows","Footer","Button","variant","onClick","disabled","onShow","changeTask","href","preventDefault","TableRow","props","onDoubleClick","e","el","index","key","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c02ba0bd.chunk.js","sourcesContent":["import { observable, \r\n    computed, \r\n    action, \r\n    decorate } from \"mobx\";\r\n\r\n    class ModalStore {\r\n        constructor(){\r\n            this.newTaskModal = false;\r\n            this.changeTaskModal = false;\r\n            this.changeID = 0;\r\n        }\r\n\r\n        get isNewTaskModal() {\r\n            return this.newTaskModal;\r\n          }\r\n\r\n        get isChangeTaskModal() {\r\n            return this.changeTaskModal;\r\n        }\r\n\r\n        get getChangeID() {\r\n          return this.changeID;\r\n        }\r\n        \r\n        openNewTaskModal() {\r\n            this.newTaskModal = true;\r\n          }\r\n    \r\n        closeNewTaskModal() {\r\n            this.newTaskModal = false;\r\n          }\r\n\r\n        openChangeTaskModal(id) {\r\n          this.changeTaskModal = true;\r\n          this.changeID = id;\r\n        }\r\n\r\n        closeChangeTaskModal() {\r\n          this.changeTaskModal = false;\r\n        }\r\n\r\n      }\r\n    \r\n      decorate(ModalStore, {\r\n        newTaskModal: observable,\r\n        changeTaskModal: observable,\r\n        changeID:observable,\r\n        getChangeID: computed,\r\n        isNewTaskModal: computed,\r\n        isChangeTaskModal: computed,\r\n        openNewTaskModal: action,\r\n        closeNewTaskModal: action,\r\n        openChangeTaskModal: action,\r\n        closeChangeTaskModal: action,\r\n      });\r\n    \r\n      const modalStore = new ModalStore();\r\n    \r\nexport default modalStore;    ","import { observable, \r\n    computed, \r\n    action, \r\n    decorate } from \"mobx\";\r\n\r\nconst localStorageName = 'myValueInLocalStorage';\r\n\r\n    class TaskListStore {\r\n        constructor(){\r\n            this.taskList = \r\n              JSON.parse(  localStorage.getItem(localStorageName) || '[]' );\r\n        }\r\n\r\n        get getTaskList() {\r\n            return this.taskList;\r\n          }\r\n\r\n        get getTaskCount() {\r\n            return this.taskList.length;\r\n        }\r\n\r\n        getTaskNameByID(id) {\r\n          let task = this.taskList\r\n          .filter(ts=>ts.id===id)[0];\r\n          if (task) return task.name || 'Unknow name';\r\n          return 'Unknow name';\r\n        }\r\n\r\n        getTaskDescriptionByID(id) {\r\n          let task = this.taskList\r\n          .filter(ts=>ts.id===id)[0];\r\n          if (task) return task.description || 'Unknow description';\r\n          return 'Unknow description';\r\n        }\r\n        \r\n        saveTaskList(){\r\n            localStorage.setItem(localStorageName,\r\n                JSON.stringify(this.taskList));\r\n            \r\n        }\r\n\r\n        addNewTask(task) {\r\n            this.taskList.push(task);\r\n            this.saveTaskList();\r\n          }\r\n    \r\n        removeTaskByID(id) {\r\n            this.taskList = this\r\n              .taskList\r\n              .filter(ts=>ts.id!==id)\r\n              .map( (v,i) => {\r\n                return Object.assign({}, v, {\r\n                  id: i+1\r\n                });\r\n              });\r\n            this.saveTaskList();\r\n          }\r\n\r\n        changeTask(id, name, description){\r\n          this.taskList = this\r\n              .taskList\r\n              .map( v => { \r\n                if (v.id === id) \r\n                  return Object.assign({}, v, {\r\n                    name: name,\r\n                    description: description\r\n                  });\r\n                return v;\r\n              });\r\n            this.saveTaskList();\r\n        }\r\n\r\n      }\r\n    \r\n      decorate(TaskListStore, {\r\n        taskList: observable,\r\n        getTaskList: computed,\r\n        getTaskCount: computed,\r\n        getTaskNameByID: action,\r\n        getTaskDescriptionByID: action,\r\n        addNewTask: action,\r\n        removeTaskByID: action,\r\n      });\r\n    \r\n      const taskList = new TaskListStore();\r\n    \r\nexport default taskList;","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport modalStore from '../store/modalStore';\r\nimport taskList from '../store/taskListStore';\r\n\r\nconst CreateModal = () => {\r\n  const [showSave, setSave] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const closeForm = () => {\r\n    modalStore.closeNewTaskModal();\r\n  };\r\n\r\n  const saveTask = () => {\r\n    taskList.addNewTask({ \r\n        id:taskList.getTaskCount + 1,\r\n        name:name,\r\n        description:description\r\n    })  \r\n    modalStore.closeNewTaskModal();\r\n  };\r\n\r\n  const onChangeName = event => {\r\n    setName(event.target.value);\r\n    setSave(event.target.value > 0 && description.length > 0);\r\n  };\r\n\r\n  const onChangeDescription = event => {\r\n    setDescription(event.target.value);\r\n    setSave(name.length > 0 && event.target.value.length > 0);\r\n  };\r\n\r\n  return (\r\n    <Modal show={modalStore.newTaskModal} onHide={closeForm} animation={true}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>New Task</Modal.Title>\r\n      </Modal.Header>\r\n      <Form className=\"form\">\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <label>Name:</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              onChange={onChangeName}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <label>Description:</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              rows=\"3\"\r\n              onChange={onChangeDescription}\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={closeForm}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"secondary\" disabled={!showSave} onClick={saveTask}>\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default observer(CreateModal);\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport modalStore from '../store/modalStore';\r\nimport taskList from '../store/taskListStore';\r\n\r\nconst ChangeModal = () => {\r\n  const [showSave, setSave] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n\r\n  const showChangeModal = () => {\r\n        setName(taskList.getTaskNameByID(modalStore.changeID));\r\n        setDescription(taskList.getTaskDescriptionByID(modalStore.changeID));\r\n  }\r\n\r\n  const closeForm = () => {\r\n    modalStore.closeChangeTaskModal();\r\n  };\r\n\r\n  const saveTask = () => {\r\n    taskList.changeTask(modalStore.changeID, name, description)  \r\n    modalStore.closeChangeTaskModal();\r\n  };\r\n\r\n  const onChangeName = event => {\r\n    setName(event.target.value);\r\n    setSave(name.length > 0 && description.length > 0);\r\n  };\r\n\r\n  const onChangeDescription = event => {\r\n    setDescription(event.target.value);\r\n    setSave(name.length > 0 && description.length > 0);\r\n  };\r\n\r\n  return (\r\n    <Modal show={modalStore.changeTaskModal} onShow={showChangeModal} onHide={closeForm} animation={true}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Change Task</Modal.Title>\r\n      </Modal.Header>\r\n      <Form className=\"form\">\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <label>Name:</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\" \r\n              value={name}\r\n              onChange={onChangeName}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <label>Description:</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onChangeDescription}\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={closeForm}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"secondary\" disabled={!showSave} onClick={saveTask}>\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default observer(ChangeModal);","import React from \"react\";\r\nimport CreateModal from \"./modalNewTask\";\r\nimport ChangeModal from './modalChange';\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport modalStore from '../store/modalStore';\r\nimport taskList from '../store/taskListStore';\r\n\r\nimport \"./customicon.css\";\r\n\r\nconst Header = () => {\r\n  const createNew = event => {\r\n    event.preventDefault();\r\n    modalStore.openNewTaskModal();\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"float-left\">\r\n        <p className=\"lead\">Task List / {taskList.getTaskCount} items</p>\r\n        </div>\r\n        <div className=\"float-right\">\r\n          <ul className=\"list-inline text-center align-items-center\">\r\n            <li className=\"list-inline-item\">Create new</li>\r\n            <li className=\"list-inline-item\">\r\n              <a href=\"index.html\" onClick={createNew}>\r\n                <i className=\"icon-custom-add\"></i>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <CreateModal/>\r\n      <ChangeModal/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Header);\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport taskList from '../store/taskListStore';\r\nimport modalStore from '../store/modalStore';\r\n\r\n\r\nimport \"./customicon.css\";\r\n\r\nconst TableRow = (props) => {\r\n\r\n    return (\r\n          <tr onDoubleClick={ () => {modalStore.openChangeTaskModal(props.id)}}>\r\n            <td>{props.id}.</td>\r\n            <td>\r\n              <ul className=\"list-inline\">\r\n                <li className=\"list-inline-item\">\r\n                  <i className=\"icon-custom-envelope\"></i>\r\n                </li>\r\n                <li className=\"list-inline-item\">{props.name}</li>\r\n              </ul>\r\n            </td>\r\n            <td>{props.description}</td>\r\n            <td className=\"text-center\">\r\n              <a\r\n                href=\"index.html\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  taskList.removeTaskByID(props.id);\r\n                }}\r\n              >\r\n                <i className=\"icon-custom-delete\"></i>\r\n              </a>\r\n            </td>\r\n          </tr>\r\n    );\r\n  };\r\n\r\n  TableRow.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n  };\r\n  \r\n  export default TableRow;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport TableRow from './tableRow';\r\nimport taskList from '../store/taskListStore';\r\n\r\nconst Table = () => {\r\n  return (\r\n    <table className=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th className=\"text-center\">Delete</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {taskList.taskList.map((el,index) => { \r\n            return(\r\n                <TableRow \r\n                    key = {index}\r\n                    id={el.id} \r\n                    name={el.name} \r\n                    description={el.description}/>  \r\n            )}\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default observer(Table);\r\n","import React from 'react';\r\nimport Header from './header';\r\nimport Table from './table';\r\n\r\nconst Content = () => {\r\n  \r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className='display-4 text-center'>Task List</h3>    \r\n            <Header/>\r\n            <Table/>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default Content;","import React from 'react';\nimport Content from './component/content';\n\nconst App = () => {\n  return (\n    <div>\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}